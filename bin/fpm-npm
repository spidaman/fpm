#!/usr/bin/env ruby

require 'rubygems'
require "optparse"
require "ostruct"
require "json"

# packages up npm packages for "global" installation
# assumes node is installed in /usr
# so packages land in /usr/lib/node_modules the same
# as if you used npm to put them there

# Prefix package names with 'nodejs-'
PACKAGEPREFIX = "nodejs-"
  
def npm2pkg(name, version)
  # every npm package gets its own build directory
  thisdir = Dir.pwd
  builddir="#{thisdir}/npm2pkg/#{name}/#{version}"
  # create all of the intermediate directories
  [
    "#{thisdir}/npm2pkg",
    "#{thisdir}/npm2pkg/#{name}",
    builddir, 
    "#{builddir}/usr",
    "#{builddir}/usr/bin",
    "#{builddir}/usr/share",
    "#{builddir}/usr/share/man"
  ].each { |path| Dir.mkdir(path) if !File.exists?(path) }

  # make a custom .npmrc
  File.open("#{builddir}/.npmrc", "w") do |file|
    file.puts "root = #{builddir}/usr"
    file.puts "binroot = #{builddir}/usr/bin"
    file.puts "manroot = #{builddir}/usr/share/man"
  end

  ## Trick npm into using the custom .npmrc
  npmcmd = "env - PATH=$PATH HOME=#{builddir} npm install -g #{name}@#{version} --prefix=#{builddir}/usr"
  system npmcmd

  # Load the package.json and glean some information from it, then invoke fpm
  package = JSON.parse(File.new("#{builddir}/usr/lib/node_modules/#{name}/package.json").read())

  if package["author"]
    maintainer = "'#{package["author"]}'"
  else
    m = "'#{package["maintainers"][0]}'" \
      rescue { "name" => "missing upstream author", "email" => ENV["USER"] }
    maintainer = "#{m["name"]} <#{m["email"]}>"
  end

  pkgcmd = [ "fpm",
    "-n", "#{PACKAGEPREFIX}#{package["name"]}",
    "-v", package["version"],
    "-m", maintainer,
    "-t", "deb",
    "-s", "dir",
    "-C", builddir,
    "-p", "#{PACKAGEPREFIX}#{package["name"]}-VERSION_ARCH.deb",
    "usr" 
  ]
  system *pkgcmd

end

if __FILE__ == $0
  settings = OpenStruct.new
  settings.packagetype = 'deb' # this is all we know how to do atm anyway...
  opts = OptionParser.new do |opts|
    opts.on("-n PACKAGENAME", "--name PACKAGENAME",
            "What name to give to the package") do |name|
      settings.name = name
    end

    opts.on("-v VERSION", "--version VERSION",
            "version to give the package") do |version|
      settings.version = version
    end

    opts.on("-t OUTPUTTYPE", "--type OUTPUTTYPE",
            "what kind of package you want as output (deb, etc)") do |packagetype|
      settings.packagetype = packagetype
    end
  end

  args = opts.parse(ARGV)

  if !["deb"].include?(settings.packagetype)
    $stderr.puts "Unsupported output package type '#{settings.packagetype}'." \
                 "Only supports 'deb' right now."
    exit 1
  end

  if !settings.name
    $stderr.puts "No npm package name given (missing -n?)"
    exit 1
  end

  if !settings.version
    $stderr.puts "No npm package version given (missing -v?)"
    exit 1
  end
  npm2pkg(settings.name, settings.version)
end